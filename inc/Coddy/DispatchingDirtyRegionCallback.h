////////////////////////////////////////////////////////////////////////////////////////////////////
// Cloddy SDK v2.1 - (C) Copyright 2008-2012, BiteTheBytes UG (haftungsbeschraenkt)
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CLODDY_API_HEIGHTMAPS_DISPATCHINGDIRTYREGIONCALLBACK_H
#define CLODDY_API_HEIGHTMAPS_DISPATCHINGDIRTYREGIONCALLBACK_H

#include "CodeX/System.h"

// Include referenced interfaces.

#include "Cloddy/IDirtyRegionCallback.h"

// Forward declare referenced interfaces.

namespace Cloddy { namespace Core { namespace Collections { template<class> class IList; } } }

// Declare class ::Cloddy::API::Heightmaps::DispatchingDirtyRegionCallback.

namespace Cloddy { namespace API { namespace Heightmaps
{
  // Use referenced namespaces.
  
  using namespace CodeX;
  
  // Use referenced interfaces.
  
  using Cloddy::Core::Collections::IList;
  
  /*!
   * @brief  This class can be used to dispatch dirty region callback generated by a single 
   *         heightmap to multiple IDirtyRegionCallback objects.
   * 
   * Dispatching of dirty region callbacks is necessary when a single heightmap is used as the 
   * basis for more than one CLOD mesh (eg. one for rendering and one for collision detection)and 
   * this heightmap is modified.
   */
  class DispatchingDirtyRegionCallback : public virtual IDirtyRegionCallback
  {
    // ---------------------------------------------------------------------------------------------
    // Public / Methods
    // ---------------------------------------------------------------------------------------------
  public:
    
    /*!
     * @brief  Adds a IDirtyRegionCallback to this dispatcher.
     * 
     * @param callback <b>[not-null]</b>  The callback object to add.
     */
    void AddCallback(IDirtyRegionCallback* callback);
    
    virtual void MarkAsDirty(int32 faceX, int32 faceY, int32 face, int32 width, int32 height);
    
    /*!
     * @brief  Removes a IDirtyRegionCallback from this dispatcher.
     * 
     * @param callback <b>[not-null]</b>  The callback object to remove.
     */
    void RemoveCallback(IDirtyRegionCallback* callback);
    
    // ---------------------------------------------------------------------------------------------
    // Private / Attributes
    // ---------------------------------------------------------------------------------------------
  private:
    
    /*!
     * @brief  The registered callback objects.
     */
    Ptr<IList<Ref<IDirtyRegionCallback> > > callbacks;
    
    // ---------------------------------------------------------------------------------------------
    // Metadata
    // ---------------------------------------------------------------------------------------------
    
    /*!
     * @brief Type definition for a smart pointer to this type.
     *
     * The \c ptr typedef can be used when the \c Ptr symbol cannot be used because another symbol
     * of that name has already been defined.
     */
    public: typedef Ptr<DispatchingDirtyRegionCallback> ptr;
    
    /*!
     * @brief The unique ID of this type.
     */
    public: static const int32 TypeId = 0x82EC9A87;
    
    /*!
     * @brief Tries to cast this object to the given type.
     *
     * @param typeId The ID of the type to cast to.
     *
     * @return The result of the type cast. Can be \c 0 if the requested cast is an invalid 
     *         downcast.
     */
    protected: virtual void* TryCast(int typeId)
    {
      if (typeId == TypeId) return (void*) this;
      void* ptr;
      if ((ptr = IDirtyRegionCallback::TryCast(typeId)) != 0) return ptr;
      return (void*) 0;
    }
  };
  
} } } 

#endif
