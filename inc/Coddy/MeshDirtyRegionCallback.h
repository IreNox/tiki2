////////////////////////////////////////////////////////////////////////////////////////////////////
// Cloddy SDK v2.1 - (C) Copyright 2008-2012, BiteTheBytes UG (haftungsbeschraenkt)
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CLODDY_API_HEIGHTMAPS_MESHDIRTYREGIONCALLBACK_H
#define CLODDY_API_HEIGHTMAPS_MESHDIRTYREGIONCALLBACK_H

#include "CodeX/System.h"

// Include referenced structures.

#include "Cloddy/Box2I.h"
#include "Cloddy/Box3I.h"

// Include referenced interfaces.

#include "Cloddy/IDirtyRegionCallback.h"

// Forward declare referenced interfaces.

namespace Cloddy { namespace API { namespace Heightmaps { class IHeightmap; } } }
namespace Cloddy { namespace Kernel { class IMesh; } }

// Forward declare referenced classes.

namespace Cloddy { namespace API { namespace Heightmaps { class DirtyRegionCube; } } }
namespace Cloddy { namespace API { namespace Heightmaps { class DirtyRegionRect; } } }

// Declare class ::Cloddy::API::Heightmaps::MeshDirtyRegionCallback.

namespace Cloddy { namespace API { namespace Heightmaps
{
  // Use referenced namespaces.
  
  using namespace CodeX;
  
  // Use referenced structures.
  
  using Cloddy::API::Util::Box2I;
  using Cloddy::API::Util::Box3I;
  
  // Use referenced interfaces.
  
  using Cloddy::Kernel::IMesh;
  
  /*!
   * @brief  Implementation of the IDirtyRegionCallback interface that marks dirty regions of 
   *         a IMesh as dirty.
   * 
   * This class assumes that dirty regions are generated by modifying the mutable base heightmap of 
   * the meshes heightmap (see IHeightmap::GetBaseHeightmap).Dirty regions are automatically 
   * translated from base heightmap coordinate space to the coordinate space of the meshes 
   * heightmap via IHeightmap::TransformFromBaseHeightmap.
   * 
   * The following vertex data semantics are used by this class (\e opt  means that the semantic 
   * will be used if present,\e req  means that the semantic must be present):
   *   - \e req  - Semantic::HeightmapCoords
   */
  class MeshDirtyRegionCallback : public virtual IDirtyRegionCallback
  {
    // ---------------------------------------------------------------------------------------------
    // Public / Attributes
    // ---------------------------------------------------------------------------------------------
  public:
    
    /*!
     * @brief  Specifies the minimum sector size,in heightmap samples.
     * 
     * CLOD mesh sectors are marked as dirty if they lie completely inside the dirty region.If they 
     * intersect the dirty region and reach a given minimum sector size,they are marked as dirty as 
     * well.
     * 
     * @return <b>[>=0]</b>  The minimum sector size.
     */
    int32 GetMinSectorSize();
    
    /*!
     * @brief  Specifies the minimum sector size,in heightmap samples.
     * 
     * CLOD mesh sectors are marked as dirty if they lie completely inside the dirty region.If they 
     * intersect the dirty region and reach a given minimum sector size,they are marked as dirty as 
     * well.
     * 
     * @param value <b>[>=0]</b>  The minimum sector size.
     */
    void SetMinSectorSize(int32 value);
    
    // ---------------------------------------------------------------------------------------------
    // Public / Methods
    // ---------------------------------------------------------------------------------------------
    
    /*!
     * @brief  Creates an IDirtyRegionCallback for the given IMesh.
     * 
     * @param mesh <b>[not-null]</b>  The IMesh object.
     * 
     * @return <b>[not-null]</b>  The IDirtyRegionCallback object.
     */
    static Ptr<MeshDirtyRegionCallback> ForMesh(IMesh* mesh);
    
    virtual void MarkAsDirty(int32 faceX, int32 faceY, int32 face, int32 width, int32 height);
    
    // ---------------------------------------------------------------------------------------------
    // Private / Attributes
    // ---------------------------------------------------------------------------------------------
  private:
    
    /*!
     * @brief  Helper object used for computing bounding boxes for cubemap dirty regions.
     */
    Box3I box;
    
    /*!
     * @brief  The dirty region marker for BaseGeometry::BaseGeometry_Sphere meshes,
     *         ie. MapType::MapType_Cube.heightmaps.
     */
    Ptr<DirtyRegionCube> dirtyRegionCube;
    
    /*!
     * @brief  The dirty region marker for BaseGeometry::BaseGeometry_Square meshes,
     *         ie. MapType::MapType_Rect heightmaps.
     */
    Ptr<DirtyRegionRect> dirtyRegionRect;
    
    /*!
     * @brief  The IHeightmap of the IMesh.
     */
    Ptr<IHeightmap> heightmap;
    
    /*!
     * @brief  Size of #heightmap,minus one.
     */
    int32 heightmapSizeMinusOne;
    
    /*!
     * @brief  The IMesh object.
     */
    Ptr<IMesh> mesh;
    
    /*!
     * @brief  Helper object used for transforming dirty regions.
     */
    Box2I region;
    
    // ---------------------------------------------------------------------------------------------
    // Private / Constructors
    // ---------------------------------------------------------------------------------------------
    
    /*!
     * @brief  Creates a new instance of MeshDirtyRegionCallback.
     * 
     * @param mesh The IMesh object.
     * @param dirtyRegionRect The dirty region marker.
     */
    MeshDirtyRegionCallback(IMesh* mesh, DirtyRegionRect* dirtyRegionRect);
    
    /*!
     * @brief  Creates a new instance of MeshDirtyRegionCallback.
     * 
     * @param mesh The IMesh object.
     * @param dirtyRegionCube The dirty region marker.
     */
    MeshDirtyRegionCallback(IMesh* mesh, DirtyRegionCube* dirtyRegionCube);
    
    // ---------------------------------------------------------------------------------------------
    // Metadata
    // ---------------------------------------------------------------------------------------------
    
    /*!
     * @brief Type definition for a smart pointer to this type.
     *
     * The \c ptr typedef can be used when the \c Ptr symbol cannot be used because another symbol
     * of that name has already been defined.
     */
    public: typedef Ptr<MeshDirtyRegionCallback> ptr;
    
    /*!
     * @brief The unique ID of this type.
     */
    public: static const int32 TypeId = 0x8D095D5E;
    
    /*!
     * @brief Tries to cast this object to the given type.
     *
     * @param typeId The ID of the type to cast to.
     *
     * @return The result of the type cast. Can be \c 0 if the requested cast is an invalid 
     *         downcast.
     */
    protected: virtual void* TryCast(int typeId)
    {
      if (typeId == TypeId) return (void*) this;
      void* ptr;
      if ((ptr = IDirtyRegionCallback::TryCast(typeId)) != 0) return ptr;
      return (void*) 0;
    }
  };
  
} } } 

#endif
