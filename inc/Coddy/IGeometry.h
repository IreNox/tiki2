////////////////////////////////////////////////////////////////////////////////////////////////////
// Cloddy SDK v2.1 - (C) Copyright 2008-2012, BiteTheBytes UG (haftungsbeschraenkt)
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CLODDY_API_GEOMETRIES_IGEOMETRY_H
#define CLODDY_API_GEOMETRIES_IGEOMETRY_H

#include "CodeX/System.h"

// Include referenced enumerations.

#include "Cloddy/Handedness.h"

// Forward declare referenced structures.

namespace Cloddy { namespace Core { namespace Math { namespace Vectors { struct Mat4D; } } } }

// Forward declare referenced classes.

namespace Cloddy { namespace API { namespace Geometries { class GeometrySample; } } }

// Declare interface ::Cloddy::API::Geometries::IGeometry.

namespace Cloddy { namespace API { namespace Geometries
{
  // Use referenced namespaces.
  
  using namespace CodeX;
  
  // Use referenced structures.
  
  using Cloddy::Core::Math::Vectors::Mat4D;
  
  /*!
   * @brief  Represents the base geometry of a terrain in terrain-space.The center of the terrain 
   *         always resides at the coordinate origin in terrain-space.
   * 
   * The application must provide an IGeometry object for each CLOD mesh by adding 
   * a ComponentIdsApi::Req_Geometry component to the meshes IProvider object.
   */
  class NO_VTABLE IGeometry : public virtual Object
  {
    // ---------------------------------------------------------------------------------------------
    // Attributes
    // ---------------------------------------------------------------------------------------------
  public:
    
    /*!
     * @brief  Radius of the bounding sphere that contains all vertex positions generated by 
     *         this IGeometry object.
     * 
     * @return <b>[>0]</b>  The bounding sphere,in terrain-space.
     */
    virtual float64 GetBoundingSphereRadius() = 0;
    
    /*!
     * @brief  Returns the handedness of this geometry object.
     * 
     * The handedness of a geometry is taken into account when vertex normal vectors are computed:
     * Normal vectors are computed from vertex positions using a counter-clockwise winding in 
     * heightmap space.Since heightmap space is always right-handed,all computed normal vectors 
     * must be flipped when the application uses a left-handed world coordinate system.
     * 
     * @return The coordinate system handedness.
     */
    virtual Handedness GetHandedness() = 0;
    
    /*!
     * @brief  The maximum vertex displacement.
     * 
     * The default value is \c 0  (ie. no displacement).
     * 
     * @return <b>[>=0]</b>  The maximum vertex displacement,in terrain-space.
     */
    virtual float64 GetMaximumDisplacement() = 0;
    
    /*!
     * @brief  The maximum vertex displacement.
     * 
     * The default value is \c 0  (ie. no displacement).
     * 
     * @param value <b>[>=0]</b>  The maximum vertex displacement,in terrain-space.
     */
    virtual void SetMaximumDisplacement(float64 value) = 0;
    
    /*!
     * @brief  The internal map size of this geometry object.
     * 
     * @return <b>[pow2+1]</b>  The internal map size.
     * 
     * @see IMap
     */
    virtual int32 GetSize() = 0;
    
    // ---------------------------------------------------------------------------------------------
    // Methods
    // ---------------------------------------------------------------------------------------------
    
    /*!
     * @brief  Computes the heightmap coordinates and elevation from the given terrain-space vertex 
     *         position.
     * 
     * The following fields of \e sample  are used:
     *   - <i>in </i>GeometrySample::PositionX
     *   - <i>in </i>GeometrySample::PositionY
     *   - <i>in </i>GeometrySample::PositionZ
     *   - <i>out </i>GeometrySample::HeightmapX
     *   - <i>out </i>GeometrySample::HeightmapY
     *   - <i>out </i>GeometrySample::HeightmapZ
     *   - <i>out </i>GeometrySample::Elevation
     * 
     * @param sample The geometry sample object.
     */
    virtual void ComputeHeightmapCoordinatesAndElevation(GeometrySample* sample) = 0;
    
    /*!
     * @brief  Computes the terrain-space vertex position from the given heightmap coordinates and 
     *         elevation.
     * 
     * The following fields of \e sample  are used:
     *   - <i>in </i>GeometrySample::HeightmapX
     *   - <i>in </i>GeometrySample::HeightmapY
     *   - <i>in </i>GeometrySample::HeightmapZ
     *   - <i>in </i>GeometrySample::Elevation
     *   - <i>out </i>GeometrySample::PositionX
     *   - <i>out </i>GeometrySample::PositionY
     *   - <i>out </i>GeometrySample::PositionZ
     *   - <i>out </i>GeometrySample::UpX
     *   - <i>out </i>GeometrySample::UpY
     *   - <i>out </i>GeometrySample::UpZ
     * 
     * @param sample The geometry sample object.
     */
    virtual void ComputeVertexPosition(GeometrySample* sample) = 0;
    
    /*!
     * @brief  Transforms this geometry to the given handedness by flipping the Z-axis if necessary.
     * 
     * @param handedness The requested handedness.
     * 
     * @return <b>[not-null]</b>  The resulting geometry.
     */
    virtual Ptr<IGeometry> ToHandedness(Handedness handedness) = 0;
    
    /*!
     * @brief  Creates a geometry that transforms the output coordinates of this geometry with the 
     *         given matrix.
     * 
     * @param matrix The transformation matrix.
     * 
     * @return <b>[not-null]</b>  The resulting geometry.
     */
    virtual Ptr<IGeometry> Transform(const Mat4D& matrix) = 0;
    
    // ---------------------------------------------------------------------------------------------
    // Metadata
    // ---------------------------------------------------------------------------------------------
    
    /*!
     * @brief Type definition for a smart pointer to this type.
     *
     * The \c ptr typedef can be used when the \c Ptr symbol cannot be used because another symbol
     * of that name has already been defined.
     */
    public: typedef Ptr<IGeometry> ptr;
    
    /*!
     * @brief The unique ID of this type.
     */
    public: static const int32 TypeId = 0xECAB3413;
    
    /*!
     * @brief Tries to cast this object to the given type.
     *
     * @param typeId The ID of the type to cast to.
     *
     * @return The result of the type cast. Can be \c 0 if the requested cast is an invalid 
     *         downcast.
     */
    protected: virtual void* TryCast(int typeId)
    {
      if (typeId == TypeId) return (void*) this;
      return (void*) 0;
    }
  };
} } } 

#endif
