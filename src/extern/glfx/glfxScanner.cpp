
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer glfx_create_buffer
#define yy_delete_buffer glfx_delete_buffer
#define yy_flex_debug glfx_flex_debug
#define yy_init_buffer glfx_init_buffer
#define yy_flush_buffer glfx_flush_buffer
#define yy_load_buffer_state glfx_load_buffer_state
#define yy_switch_to_buffer glfx_switch_to_buffer
#define yyin glfxin
#define yyleng glfxleng
#define yylex glfxlex
#define yylineno glfxlineno
#define yyout glfxout
#define yyrestart glfxrestart
#define yytext glfxtext
#define yywrap glfxwrap
#define yyalloc glfxalloc
#define yyrealloc glfxrealloc
#define yyfree glfxfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glfxrestart(glfxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t glfxleng;

extern FILE *glfxin, *glfxout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE glfxlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-glfxlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < glfxleng; ++yyl )\
                    if ( glfxtext[yyl] == '\n' )\
                        --glfxlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up glfxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glfxrestart()), so that the user can continue scanning by
	 * just pointing glfxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when glfxtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t glfxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow glfxwrap()'s to do buffer switches
 * instead of setting up a fresh glfxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void glfxrestart (FILE *input_file  );
void glfx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE glfx_create_buffer (FILE *file,int size  );
void glfx_delete_buffer (YY_BUFFER_STATE b  );
void glfx_flush_buffer (YY_BUFFER_STATE b  );
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void glfxpop_buffer_state (void );

static void glfxensure_buffer_stack (void );
static void glfx_load_buffer_state (void );
static void glfx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER glfx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE glfx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE glfx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE glfx_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *glfxalloc (yy_size_t  );
void *glfxrealloc (void *,yy_size_t  );
void glfxfree (void *  );

#define yy_new_buffer glfx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glfxwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *glfxin = (FILE *) 0, *glfxout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int glfxlineno;

int glfxlineno = 1;

extern char *glfxtext;
#define yytext_ptr glfxtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up glfxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	glfxleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 33
#define YY_END_OF_BUFFER 34
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[3612] =
    {
 {   0,   0 }, {   0,3571 }, {   0,   0 }, {   0,3569 }, {   1,  86 },
 {   2,  88 }, {   3,  90 }, {   4,  86 }, {   5,  86 }, {   6,  92 },
 {   7,  94 }, {   8,  86 }, {   9,  96 }, {  10,  98 }, {  11, 101 },
 {  12, 103 }, {  13, 107 }, {  14, 122 }, {  15, 124 }, {  16, 126 },
 {  17, 128 }, {  18, 169 }, {  19,  86 }, {  20,  86 }, {  21,  86 },
 {  22, 128 }, {  23, 173 }, {  24, 128 }, {  25, 128 }, {  26, 214 },
 {  27, 255 }, {  28, 128 }, {  29, 296 }, {  30, 128 }, {  31, 128 },
 {  32, 128 }, {  33, 337 }, {  34, 378 }, {  35, 128 }, {  36, 419 },
 {  37, 460 }, {  38, 128 }, {  39, 501 }, {  40, 175 }, {  41, 177 },
 {   0,   0 }, {   0,3526 }, {   1,  43 }, {   2,  45 }, {   3,  47 },

 {   4,  43 }, {   5, 145 }, {   6,  49 }, {   7,  51 }, {   8,  43 },
 {   9,  53 }, {  10,  55 }, {  11,  58 }, {  12,  60 }, {  13,  64 },
 {  14,  79 }, {  15,  81 }, {  16,  83 }, {  17,  85 }, {  18, 126 },
 {  19,  43 }, {  20,  43 }, {  21,  43 }, {  22,  85 }, {  23, 130 },
 {  24,  85 }, {  25,  85 }, {  26, 171 }, {  27, 212 }, {  28,  85 },
 {  29, 253 }, {  30,  85 }, {  31,  85 }, {  32,  85 }, {  33, 294 },
 {  34, 335 }, {  35,  85 }, {  36, 376 }, {  37, 417 }, {  38,  85 },
 {  39, 458 }, {  40, 132 }, {  41, 134 }, {   0,  32 }, {   0,3483 },
 {   0,  31 }, {   0,3481 }, {   0,  31 }, {   0,3479 }, {   0,  20 },
 {   0,3477 }, {   0,  21 }, {   0,3475 }, {   0,  25 }, {   0,3473 },

 {   0,  32 }, {   0,3471 }, {   0,   0 }, {   0,  32 }, {   0,3468 },
 {   0,  14 }, {   0,3466 }, {   0,   0 }, {   0,   0 }, {   0,  14 },
 {   0,3462 }, {   0,   0 }, {   8, 441 }, {  12, 118 }, {  13, 118 },
 {  11, 484 }, {  10, 117 }, {   0,   0 }, {  12, 158 }, {  13, 158 },
 {  10, 113 }, {   0,   0 }, {  12, 195 }, {  13, 195 }, {   0,  28 },
 {   0,3447 }, {   0,  27 }, {   0,3445 }, {   0,  26 }, {   0,3443 },
 {   0,  19 }, {   0,3441 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 500 }, {  13, 500 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17, 500 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  21, 500 }, {  22, 500 }, {  23, 500 },
 {  24, 500 }, {  25, 500 }, {  26, 500 }, {  27, 500 }, {  28, 500 },
 {  29, 500 }, {  30, 500 }, {  31, 500 }, {  32, 500 }, {  33, 500 },
 {  34, 500 }, {  35, 500 }, {  36, 500 }, {  37, 500 }, {  38, 500 },
 {  39, 500 }, {   0,  32 }, {   0,3400 }, {   0,   0 }, {   2, 500 },
 {   0,  19 }, {   0,3396 }, {   0,  22 }, {   0,3394 }, {   0,  23 },
 {   0,3392 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 455 }, {  13, 455 },
 {   0,  32 }, {   0,3381 }, {  20, 504 }, {  17, 455 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21, 455 }, {  22, 455 }, {  23, 455 },

 {  24, 455 }, {  25, 502 }, {  26, 455 }, {  27, 455 }, {  28, 455 },
 {  29, 455 }, {  30, 455 }, {  31, 455 }, {  32, 455 }, {  33, 455 },
 {  34, 455 }, {  35, 455 }, {  36, 543 }, {  37, 455 }, {  38, 455 },
 {  39, 455 }, {   0,  19 }, {   0,3355 }, {   0,  15 }, {   0,3353 },
 {  29, 497 }, {   0,   0 }, {   0,  15 }, {   0,3349 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 414 },
 {  13, 414 }, {  12, 503 }, {  13, 503 }, {   0,   0 }, {  17, 414 },
 {  12, 503 }, {  13, 503 }, {   0,   0 }, {  21, 414 }, {  22, 543 },
 {  23, 414 }, {  24, 414 }, {  25, 414 }, {  26, 414 }, {  27, 414 },
 {  28, 414 }, {  29, 414 }, {  30, 414 }, {  31, 414 }, {  32, 414 },

 {  33, 414 }, {  34, 414 }, {  35, 414 }, {  36, 584 }, {  37, 414 },
 {  38, 414 }, {  39, 414 }, {   0,  19 }, {   0,3314 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,3308 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12, 373 }, {  13, 373 }, {   0,   0 }, {   0,   0 }, {  10, -41 },
 {  17, 373 }, {  12,   0 }, {  13,   0 }, {   0,   0 }, {  21, 373 },
 {  22, 373 }, {  23, 373 }, {  24, 373 }, {  25, 373 }, {  26, 373 },
 {  27, 373 }, {  28, 373 }, {  29, 373 }, {  30, 373 }, {  31, 373 },
 {  32, 373 }, {  33, 373 }, {  34, 373 }, {  35, 373 }, {  36, 584 },
 {  37, 373 }, {  38, 373 }, {  39, 373 }, {   0,  19 }, {   0,3273 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  14 },
 {   0,3267 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12, 332 }, {  13, 332 }, {   0,   0 }, {   0,   0 },
 {  10, -82 }, {  17, 332 }, {  12,   0 }, {  13,   0 }, {   0,   0 },
 {  21, 332 }, {  22, 332 }, {  23, 332 }, {  24, 332 }, {  25, 332 },
 {  26, 332 }, {  27, 332 }, {  28, 332 }, {  29, 332 }, {  30, 332 },
 {  31, 584 }, {  32, 625 }, {  33, 332 }, {  34, 332 }, {  35, 332 },
 {  36, 332 }, {  37, 332 }, {  38, 332 }, {  39, 332 }, {   0,  19 },
 {   0,3232 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  12, 291 }, {  13, 291 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17, 291 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21, 291 }, {  22, 291 }, {  23, 291 }, {  24, 291 },
 {  25, 291 }, {  26, 291 }, {  27, 291 }, {  28, 291 }, {  29, 291 },
 {  30, 291 }, {  31, 291 }, {  32, 291 }, {  33, 291 }, {  34, 291 },
 {  35, 291 }, {  36, 291 }, {  37, 291 }, {  38, 625 }, {  39, 291 },
 {   0,  19 }, {   0,3191 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 250 }, {  13, 250 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17, 250 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  21, 250 }, {  22, 625 }, {  23, 250 },
 {  24, 250 }, {  25, 250 }, {  26, 250 }, {  27, 250 }, {  28, 250 },
 {  29, 250 }, {  30, 250 }, {  31, 250 }, {  32, 250 }, {  33, 250 },
 {  34, 250 }, {  35, 666 }, {  36, 250 }, {  37, 250 }, {  38, 250 },
 {  39, 250 }, {   0,  19 }, {   0,3150 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 209 },
 {  13, 209 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17, 209 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21, 209 }, {  22, 666 },
 {  23, 209 }, {  24, 209 }, {  25, 209 }, {  26, 209 }, {  27, 209 },

 {  28, 707 }, {  29, 209 }, {  30, 209 }, {  31, 209 }, {  32, 209 },
 {  33, 209 }, {  34, 209 }, {  35, 209 }, {  36, 209 }, {  37, 748 },
 {  38, 209 }, {  39, 209 }, {   0,  19 }, {   0,3109 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12, 168 }, {  13, 168 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17, 168 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21, 168 },
 {  22, 168 }, {  23, 748 }, {  24, 168 }, {  25, 789 }, {  26, 168 },
 {  27, 168 }, {  28, 168 }, {  29, 168 }, {  30, 168 }, {  31, 168 },
 {  32, 168 }, {  33, 168 }, {  34, 168 }, {  35, 830 }, {  36, 168 },

 {  37, 168 }, {  38, 168 }, {  39, 168 }, {   0,  19 }, {   0,3068 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12, 127 }, {  13, 127 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17, 127 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21, 127 }, {  22, 127 }, {  23, 127 }, {  24, 127 }, {  25, 127 },
 {  26, 127 }, {  27, 127 }, {  28, 127 }, {  29, 127 }, {  30, 127 },
 {  31, 127 }, {  32, 127 }, {  33, 127 }, {  34, 127 }, {  35, 127 },
 {  36, 830 }, {  37, 127 }, {  38, 127 }, {  39, 127 }, {   0,   0 },
 {   0,3027 }, {   1, 830 }, {   2, 830 }, {   3, 830 }, {   4, 830 },

 {   5, 830 }, {   6, 830 }, {   7, 830 }, {   8, 873 }, {   9, 830 },
 {  10, 830 }, {  11, 830 }, {  12, 830 }, {  13, 830 }, {  14, 830 },
 {  15, 830 }, {  16, 830 }, {  17, 830 }, {  18, 830 }, {  19, 830 },
 {  20, 830 }, {  21, 830 }, {  22, 830 }, {  23, 830 }, {  24, 830 },
 {  25, 830 }, {  26, 830 }, {  27, 830 }, {  28, 830 }, {  29, 830 },
 {  30, 830 }, {  31, 830 }, {  32, 830 }, {  33, 830 }, {  34, 830 },
 {  35, 830 }, {  36, 830 }, {  37, 830 }, {  38, 830 }, {  39, 830 },
 {  40, 830 }, {  41, 830 }, {   0,   0 }, {   0,2984 }, {   1, 873 },
 {   2, 873 }, {   3, 136 }, {   4, 873 }, {   5, 873 }, {   6, 873 },
 {   7, 873 }, {   8, 873 }, {   9, 873 }, {  10, 873 }, {  11, 873 },

 {  12, 873 }, {  13, 873 }, {  14, 873 }, {  15, 873 }, {  16, 873 },
 {  17, 873 }, {  18, 873 }, {  19, 916 }, {  20, 873 }, {  21, 873 },
 {  22, 873 }, {  23, 873 }, {  24, 873 }, {  25, 873 }, {  26, 873 },
 {  27, 873 }, {  28, 873 }, {  29, 873 }, {  30, 873 }, {  31, 873 },
 {  32, 873 }, {  33, 873 }, {  34, 873 }, {  35, 873 }, {  36, 873 },
 {  37, 873 }, {  38, 873 }, {  39, 873 }, {  40, 873 }, {  41, 873 },
 {   0,  19 }, {   0,2941 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,   0 }, {  13,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {   0,   0 }, {   0,2900 }, {   0,   0 }, {   2,   0 },
 {   0,  24 }, {   0,2896 }, {   0,  19 }, {   0,2894 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,2884 }, {   0,   0 },
 {  12, -47 }, {  13, -47 }, {  20,   4 }, {   0,   0 }, {   0,   0 },
 {  17, -47 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21, -47 },

 {  22, -47 }, {  23, -47 }, {  24, -47 }, {  25, -47 }, {  26, -47 },
 {  27, -47 }, {  28, -47 }, {  29, -47 }, {  30, -47 }, {  31, -47 },
 {  32, 869 }, {  33, -47 }, {  34, -47 }, {  35, -47 }, {  36, -47 },
 {  37, -47 }, {  38, -47 }, {  39, -47 }, {   0,  13 }, {   0,2853 },
 {  32,  91 }, {   0,  15 }, {   0,2850 }, {   0,  29 }, {   0,2848 },
 {   0,  15 }, {   0,2846 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12, -88 }, {  13, -88 }, {   0,   0 }, {  12,   0 },
 {  13,   0 }, {  17, -88 }, {   0,   0 }, {  12,  -4 }, {  13,  -4 },
 {  21, -88 }, {  22, -88 }, {  23, -88 }, {  24, -88 }, {  25, -88 },
 {  26, -88 }, {  27, -88 }, {  28, -88 }, {  29, -88 }, {  30, -88 },

 {  31, -88 }, {  32, -88 }, {  33, -88 }, {  34, -88 }, {  35, -88 },
 {  36, -88 }, {  37, -88 }, {  38, -88 }, {  39, -88 }, {   0,  19 },
 {   0,2812 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-129 }, {  13,-129 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-129 }, {   0,   0 }, {   0,2793 },
 {   0,   0 }, {  21,-129 }, {  22,-129 }, {  23,-129 }, {  24,-129 },
 {  25,-129 }, {  26,-129 }, {  27,-129 }, {  28,-129 }, {  29,-129 },
 {  30, 828 }, {  31,-129 }, {  32,-129 }, {  33,-129 }, {  34,-129 },
 {  35,-129 }, {  36,-129 }, {  37,-129 }, {  38,-129 }, {  39,-129 },

 {   0,  12 }, {   0,2771 }, {  23,  37 }, {   0,  30 }, {   0,2768 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-170 }, {  13,-170 },
 {   0,   0 }, {   0,2756 }, {   0,   0 }, {  17,-170 }, {   0,   0 },
 {   0,2752 }, {   0,   0 }, {  21,-170 }, {  22,-170 }, {  23,-170 },
 {  24,-170 }, {  25,-170 }, {  26,-170 }, {  27,-170 }, {  28,-170 },
 {  29,-170 }, {  30,-170 }, {  31,-170 }, {  32,-170 }, {  33,-170 },
 {  34,-170 }, {  35,-170 }, {  36,-170 }, {  37,-170 }, {  38,-170 },
 {  39,-170 }, {   0,  11 }, {   0,2730 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  30,   4 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-211 },
 {  13,-211 }, {   0,   0 }, {   0,   0 }, {  38,  41 }, {  17,-211 },
 {   0,   0 }, {   0,2711 }, {   0,   0 }, {  21,-211 }, {  22,-211 },
 {  23,-211 }, {  24,-211 }, {  25,-211 }, {  26,-211 }, {  27,-211 },
 {  28,-211 }, {  29,-211 }, {  30,-211 }, {  31,-211 }, {  32,-211 },
 {  33,-211 }, {  34,-211 }, {  35,-211 }, {  36,-211 }, {  37,-211 },
 {  38,-211 }, {  39,-211 }, {   0,  19 }, {   0,2689 }, {   0,   0 },
 {  24,  41 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-252 }, {  13,-252 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  17,-252 }, {   0,   0 }, {   0,2670 }, {   0,   0 }, {  21,-252 },
 {  22, 746 }, {  23,-252 }, {  24,-252 }, {  25,-252 }, {  26,-252 },
 {  27,-252 }, {  28,-252 }, {  29,-252 }, {  30,-252 }, {  31,-252 },
 {  32,-252 }, {  33,-252 }, {  34,-252 }, {  35,-252 }, {  36,-252 },
 {  37,-252 }, {  38,-252 }, {  39,-252 }, {   0,  16 }, {   0,2648 },
 {   0,   0 }, {   0,2646 }, {  25,  24 }, {   2,   4 }, {   0,   0 },
 {   0,2642 }, {   0,   0 }, {   2,   0 }, {   0,   0 }, {   4,2556 },
 {   0,   0 }, {  12,-293 }, {  13,-293 }, {   0,   0 }, {   0,   0 },
 {   0,2632 }, {  17,-293 }, {   2,  27 }, {   3,  32 }, {   0,   0 },
 {  21,-293 }, {  22,-293 }, {  23,-293 }, {  24,-293 }, {  25,-293 },

 {  26,-293 }, {  27,-293 }, {  28,-293 }, {  29,-293 }, {  30,-293 },
 {  31,-293 }, {  32,-293 }, {  33,-293 }, {  34,-293 }, {  35,-293 },
 {  36,-293 }, {  37, 746 }, {  38,-293 }, {  39,-293 }, {   0,  19 },
 {   0,2607 }, {   0,   0 }, {   0,2605 }, {   0,   0 }, {   2,   0 },
 {   3,   5 }, {   0,   6 }, {   0,2600 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-334 }, {  13,-334 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-334 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-334 }, {  22,-334 }, {  23,-334 }, {  24,-334 },
 {  25,-334 }, {  26,-334 }, {  27,-334 }, {  28,-334 }, {  29,-334 },
 {  30,-334 }, {  31,-334 }, {  32,-334 }, {  33,-334 }, {  34,-334 },

 {  35,-334 }, {  36,-334 }, {  37, 746 }, {  38,-334 }, {  39,-334 },
 {   0,  19 }, {   0,2566 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-375 }, {  13,-375 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-375 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-375 }, {  22,-375 }, {  23,-375 },
 {  24,-375 }, {  25,-375 }, {  26,-375 }, {  27,-375 }, {  28,-375 },
 {  29,-375 }, {  30,-375 }, {  31,-375 }, {  32,-375 }, {  33,-375 },
 {  34,-375 }, {  35,-375 }, {  36,-375 }, {  37, 746 }, {  38,-375 },
 {  39,-375 }, {   0,  19 }, {   0,2525 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-416 },
 {  13,-416 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-416 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-416 }, {  22,-416 },
 {  23,-416 }, {  24,-416 }, {  25,-416 }, {  26,-416 }, {  27,-416 },
 {  28,-416 }, {  29,-416 }, {  30,-416 }, {  31,-416 }, {  32,-416 },
 {  33, 746 }, {  34,-416 }, {  35,-416 }, {  36,-416 }, {  37,-416 },
 {  38,-416 }, {  39,-416 }, {   0,  19 }, {   0,2484 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  12,-457 }, {  13,-457 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-457 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-457 },
 {  22,-457 }, {  23,-457 }, {  24,-457 }, {  25,-457 }, {  26,-457 },
 {  27,-457 }, {  28,-457 }, {  29,-457 }, {  30,-457 }, {  31, 746 },
 {  32,-457 }, {  33,-457 }, {  34,-457 }, {  35,-457 }, {  36,-457 },
 {  37,-457 }, {  38,-457 }, {  39,-457 }, {   0,  19 }, {   0,2443 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-498 }, {  13,-498 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-498 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  21,-498 }, {  22, 746 }, {  23,-498 }, {  24,-498 }, {  25,-498 },
 {  26,-498 }, {  27,-498 }, {  28,-498 }, {  29,-498 }, {  30,-498 },
 {  31,-498 }, {  32,-498 }, {  33,-498 }, {  34,-498 }, {  35,-498 },
 {  36,-498 }, {  37,-498 }, {  38,-498 }, {  39,-498 }, {   0,  19 },
 {   0,2402 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-539 }, {  13,-539 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-539 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-539 }, {  22, 746 }, {  23,-539 }, {  24,-539 },
 {  25,-539 }, {  26,-539 }, {  27,-539 }, {  28,-539 }, {  29,-539 },

 {  30,-539 }, {  31,-539 }, {  32,-539 }, {  33,-539 }, {  34,-539 },
 {  35,-539 }, {  36,-539 }, {  37,-539 }, {  38,-539 }, {  39,-539 },
 {   0,   9 }, {   0,2361 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-580 }, {  13,-580 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-580 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-580 }, {  22,-580 }, {  23,-580 },
 {  24,-580 }, {  25,-580 }, {  26,-580 }, {  27,-580 }, {  28,-580 },
 {  29,-580 }, {  30,-580 }, {  31,-580 }, {  32,-580 }, {  33,-580 },
 {  34,-580 }, {  35,-580 }, {  36,-580 }, {  37,-580 }, {  38,-580 },

 {  39,-580 }, {   0,  10 }, {   0,2320 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-621 },
 {  13,-621 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-621 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-621 }, {  22,-621 },
 {  23,-621 }, {  24,-621 }, {  25,-621 }, {  26,-621 }, {  27,-621 },
 {  28,-621 }, {  29,-621 }, {  30,-621 }, {  31,-621 }, {  32,-621 },
 {  33,-621 }, {  34,-621 }, {  35,-621 }, {  36,-621 }, {  37,-621 },
 {  38,-621 }, {  39,-621 }, {   0,  19 }, {   0,2279 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-662 }, {  13,-662 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-662 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-662 },
 {  22,-662 }, {  23,-662 }, {  24,-662 }, {  25,-662 }, {  26,-662 },
 {  27,-662 }, {  28,-662 }, {  29,-662 }, {  30,-662 }, {  31,-662 },
 {  32,-662 }, {  33,-662 }, {  34,-662 }, {  35,-662 }, {  36,-662 },
 {  37,-662 }, {  38, 664 }, {  39,-662 }, {   0,   8 }, {   0,2238 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-703 }, {  13,-703 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  17,-703 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-703 }, {  22,-703 }, {  23,-703 }, {  24,-703 }, {  25,-703 },
 {  26,-703 }, {  27,-703 }, {  28,-703 }, {  29,-703 }, {  30,-703 },
 {  31,-703 }, {  32,-703 }, {  33,-703 }, {  34,-703 }, {  35,-703 },
 {  36,-703 }, {  37,-703 }, {  38,-703 }, {  39,-703 }, {   0,   0 },
 {   0,2197 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,  43 }, {   9,   0 },
 {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },

 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {   0,   0 }, {   0,2154 }, {   1, 580 },
 {   2, 580 }, {   3, 580 }, {   4, 580 }, {   5, 580 }, {   6, 580 },
 {   7, 580 }, {   8, 623 }, {   9, 580 }, {  10, 580 }, {  11,-614 },
 {  12, 580 }, {  13, 580 }, {  14, 580 }, {  15, 580 }, {  16, 580 },
 {  17, 580 }, {  18, 580 }, {  19, 580 }, {  20, 580 }, {  21, 580 },
 {  22, 580 }, {  23, 580 }, {  24, 580 }, {  25, 580 }, {  26, 580 },
 {  27, 580 }, {  28, 580 }, {  29, 580 }, {  30, 580 }, {  31, 580 },

 {  32, 580 }, {  33, 580 }, {  34, 580 }, {  35, 580 }, {  36, 580 },
 {  37, 580 }, {  38, 580 }, {  39, 580 }, {  40, 580 }, {  41, 580 },
 {   0,   0 }, {   0,2111 }, {   1,   0 }, {   2,   0 }, {   3,-737 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,  43 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },

 {  39,   0 }, {  40,   0 }, {  41,   0 }, {   0,   0 }, {   0,2068 },
 {   1, 580 }, {   2, 580 }, {   3, 580 }, {   4, 580 }, {   5, 580 },
 {   6, 580 }, {   7, 580 }, {   8, 580 }, {   9, 580 }, {  10, 580 },
 {  11, 580 }, {  12, 580 }, {  13, 580 }, {  14, 580 }, {  15, 580 },
 {  16, 580 }, {  17, 580 }, {  18, 580 }, {  19,   0 }, {  20, 580 },
 {  21, 580 }, {  22, 580 }, {  23, 580 }, {  24, 580 }, {  25, 580 },
 {  26, 580 }, {  27, 580 }, {  28, 580 }, {  29, 580 }, {  30, 580 },
 {  31, 580 }, {  32, 580 }, {  33, 580 }, {  34, 580 }, {  35, 580 },
 {  36, 580 }, {  37, 580 }, {  38, 580 }, {  39, 580 }, {  40, 580 },
 {  41, 580 }, {   0,  19 }, {   0,2025 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-916 },
 {  13,-916 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-916 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-916 }, {  22,-916 },
 {  23,-916 }, {  24,-916 }, {  25,-916 }, {  26,-916 }, {  27,-916 },
 {  28,-916 }, {  29,-916 }, {  30,-916 }, {  31,-916 }, {  32,-916 },
 {  33,-916 }, {  34,-916 }, {  35,-916 }, {  36,-916 }, {  37, 580 },
 {  38,-916 }, {  39,-916 }, {   0,  19 }, {   0,1984 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  12,-957 }, {  13,-957 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-957 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-957 },
 {  22,-957 }, {  23,-957 }, {  24,-957 }, {  25,-957 }, {  26,-957 },
 {  27,-957 }, {  28,-957 }, {  29,-957 }, {  30,-957 }, {  31,-957 },
 {  32,-957 }, {  33,-957 }, {  34,-957 }, {  35,-957 }, {  36, 580 },
 {  37,-957 }, {  38,-957 }, {  39,-957 }, {   0,  19 }, {   0,1943 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-998 }, {  13,-998 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-998 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  21,-998 }, {  22,-998 }, {  23,-998 }, {  24,-998 }, {  25,-998 },
 {  26,-998 }, {  27, 580 }, {  28,-998 }, {  29,-998 }, {  30,-998 },
 {  31,-998 }, {  32,-998 }, {  33,-998 }, {  34,-998 }, {  35,-998 },
 {  36,-998 }, {  37,-998 }, {  38,-998 }, {  39,-998 }, {   0,  19 },
 {   0,1902 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1039 }, {  13,-1039 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-1039 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-1039 }, {  22,-1039 }, {  23,-1039 }, {  24,-1039 },
 {  25, 580 }, {  26,-1039 }, {  27,-1039 }, {  28,-1039 }, {  29,-1039 },

 {  30,-1039 }, {  31,-1039 }, {  32,-1039 }, {  33,-1039 }, {  34,-1039 },
 {  35,-1039 }, {  36,-1039 }, {  37,-1039 }, {  38,-1039 }, {  39,-1039 },
 {   0,  16 }, {   0,1861 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1080 }, {  13,-1080 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1080 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-1080 }, {  22,-1080 }, {  23,-1080 },
 {  24,-1080 }, {  25,-1080 }, {  26,-1080 }, {  27,-1080 }, {  28,-1080 },
 {  29,-1080 }, {  30,-1080 }, {  31,-1080 }, {  32,-1080 }, {  33,-1080 },
 {  34,-1080 }, {  35,-1080 }, {  36,-1080 }, {  37,-1080 }, {  38,-1080 },

 {  39,-1080 }, {   0,  19 }, {   0,1820 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1121 },
 {  13,-1121 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1121 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1121 }, {  22,-1121 },
 {  23, 539 }, {  24,-1121 }, {  25,-1121 }, {  26,-1121 }, {  27,-1121 },
 {  28,-1121 }, {  29,-1121 }, {  30,-1121 }, {  31,-1121 }, {  32,-1121 },
 {  33,-1121 }, {  34,-1121 }, {  35,-1121 }, {  36,-1121 }, {  37,-1121 },
 {  38,-1121 }, {  39,-1121 }, {   0,  19 }, {   0,1779 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1162 }, {  13,-1162 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1162 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1162 },
 {  22,-1162 }, {  23,-1162 }, {  24,-1162 }, {  25,-1162 }, {  26,-1162 },
 {  27, 539 }, {  28,-1162 }, {  29,-1162 }, {  30,-1162 }, {  31,-1162 },
 {  32,-1162 }, {  33,-1162 }, {  34,-1162 }, {  35,-1162 }, {  36,-1162 },
 {  37,-1162 }, {  38,-1162 }, {  39,-1162 }, {   0,  19 }, {   0,1738 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1203 }, {  13,-1203 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  17,-1203 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-1203 }, {  22,-1203 }, {  23,-1203 }, {  24,-1203 }, {  25,-1203 },
 {  26,-1203 }, {  27,-1203 }, {  28,-1203 }, {  29,-1203 }, {  30,-1203 },
 {  31,-1203 }, {  32,-1203 }, {  33,-1203 }, {  34, 539 }, {  35,-1203 },
 {  36,-1203 }, {  37,-1203 }, {  38,-1203 }, {  39,-1203 }, {   0,  19 },
 {   0,1697 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1244 }, {  13,-1244 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-1244 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-1244 }, {  22,-1244 }, {  23,-1244 }, {  24, 539 },

 {  25,-1244 }, {  26,-1244 }, {  27,-1244 }, {  28,-1244 }, {  29,-1244 },
 {  30,-1244 }, {  31,-1244 }, {  32,-1244 }, {  33,-1244 }, {  34,-1244 },
 {  35,-1244 }, {  36,-1244 }, {  37,-1244 }, {  38,-1244 }, {  39,-1244 },
 {   0,  19 }, {   0,1656 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1285 }, {  13,-1285 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1285 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-1285 }, {  22,-1285 }, {  23,-1285 },
 {  24,-1285 }, {  25,-1285 }, {  26,-1285 }, {  27, 539 }, {  28,-1285 },
 {  29,-1285 }, {  30,-1285 }, {  31,-1285 }, {  32,-1285 }, {  33,-1285 },

 {  34,-1285 }, {  35,-1285 }, {  36,-1285 }, {  37,-1285 }, {  38,-1285 },
 {  39,-1285 }, {   0,  19 }, {   0,1615 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1326 },
 {  13,-1326 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1326 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1326 }, {  22,-1326 },
 {  23,-1326 }, {  24,-1326 }, {  25, 539 }, {  26,-1326 }, {  27,-1326 },
 {  28,-1326 }, {  29,-1326 }, {  30,-1326 }, {  31,-1326 }, {  32,-1326 },
 {  33,-1326 }, {  34,-1326 }, {  35,-1326 }, {  36,-1326 }, {  37,-1326 },
 {  38,-1326 }, {  39,-1326 }, {   0,   0 }, {   0,1574 }, {   1, 539 },

 {   2, 539 }, {   3, 539 }, {   4, 539 }, {   5, 539 }, {   6, 539 },
 {   7, 539 }, {   8,  43 }, {   9, 539 }, {  10, 539 }, {  11, 582 },
 {  12, 539 }, {  13, 539 }, {  14, 539 }, {  15, 539 }, {  16, 539 },
 {  17, 539 }, {  18, 539 }, {  19, 539 }, {  20, 539 }, {  21, 539 },
 {  22, 539 }, {  23, 539 }, {  24, 539 }, {  25, 539 }, {  26, 539 },
 {  27, 539 }, {  28, 539 }, {  29, 539 }, {  30, 539 }, {  31, 539 },
 {  32, 539 }, {  33, 539 }, {  34, 539 }, {  35, 539 }, {  36, 539 },
 {  37, 539 }, {  38, 539 }, {  39, 539 }, {  40, 539 }, {  41, 539 },
 {   0,   0 }, {   0,1531 }, {   1, -43 }, {   2, -43 }, {   3, -43 },
 {   4, -43 }, {   5, -43 }, {   6, -43 }, {   7, -43 }, {   8,   0 },

 {   9, -43 }, {  10, -43 }, {  11,-1237 }, {  12, -43 }, {  13, -43 },
 {  14, -43 }, {  15, -43 }, {  16, -43 }, {  17, -43 }, {  18, -43 },
 {  19, -43 }, {  20, -43 }, {  21, -43 }, {  22, -43 }, {  23, -43 },
 {  24, -43 }, {  25, -43 }, {  26, -43 }, {  27, -43 }, {  28, -43 },
 {  29, -43 }, {  30, -43 }, {  31, -43 }, {  32, -43 }, {  33, -43 },
 {  34, -43 }, {  35, -43 }, {  36, -43 }, {  37, -43 }, {  38, -43 },
 {  39, -43 }, {  40, -43 }, {  41, -43 }, {   0,   0 }, {   0,1488 },
 {   1, 539 }, {   2, 539 }, {   3,-1360 }, {   4, 539 }, {   5, 539 },
 {   6, 539 }, {   7, 539 }, {   8, 539 }, {   9, 539 }, {  10, 539 },
 {  11, 539 }, {  12, 539 }, {  13, 539 }, {  14, 539 }, {  15, 539 },

 {  16, 539 }, {  17, 539 }, {  18, 539 }, {  19,-580 }, {  20, 539 },
 {  21, 539 }, {  22, 539 }, {  23, 539 }, {  24, 539 }, {  25, 539 },
 {  26, 539 }, {  27, 539 }, {  28, 539 }, {  29, 539 }, {  30, 539 },
 {  31, 539 }, {  32, 539 }, {  33, 539 }, {  34, 539 }, {  35, 539 },
 {  36, 539 }, {  37, 539 }, {  38, 539 }, {  39, 539 }, {  40, 539 },
 {  41, 539 }, {   0,  19 }, {   0,1445 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1496 },
 {  13,-1496 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1496 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1496 }, {  22,-1496 },

 {  23,-1496 }, {  24,-1496 }, {  25,-1496 }, {  26,-1496 }, {  27,-1496 },
 {  28,-1496 }, {  29,-1496 }, {  30,-1496 }, {  31,-1496 }, {  32,-1496 },
 {  33,-1496 }, {  34,-1496 }, {  35, 539 }, {  36,-1496 }, {  37,-1496 },
 {  38,-1496 }, {  39,-1496 }, {   0,  19 }, {   0,1404 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1537 }, {  13,-1537 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1537 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1537 },
 {  22,-1537 }, {  23,-1537 }, {  24,-1537 }, {  25, 539 }, {  26,-1537 },
 {  27,-1537 }, {  28,-1537 }, {  29,-1537 }, {  30,-1537 }, {  31,-1537 },

 {  32,-1537 }, {  33,-1537 }, {  34,-1537 }, {  35,-1537 }, {  36,-1537 },
 {  37,-1537 }, {  38,-1537 }, {  39,-1537 }, {   0,  19 }, {   0,1363 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1578 }, {  13,-1578 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-1578 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-1578 }, {  22,-1578 }, {  23,-1578 }, {  24,-1578 }, {  25, 539 },
 {  26,-1578 }, {  27,-1578 }, {  28,-1578 }, {  29,-1578 }, {  30,-1578 },
 {  31,-1578 }, {  32,-1578 }, {  33,-1578 }, {  34,-1578 }, {  35,-1578 },
 {  36,-1578 }, {  37,-1578 }, {  38,-1578 }, {  39,-1578 }, {   0,  19 },

 {   0,1322 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1619 }, {  13,-1619 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-1619 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-1619 }, {  22,-1619 }, {  23,-1619 }, {  24,-1619 },
 {  25,-1619 }, {  26,-1619 }, {  27,-1619 }, {  28,-1619 }, {  29,-1619 },
 {  30,-1619 }, {  31,-1619 }, {  32,-1619 }, {  33,-1619 }, {  34,-1619 },
 {  35, 539 }, {  36,-1619 }, {  37,-1619 }, {  38,-1619 }, {  39,-1619 },
 {   0,  19 }, {   0,1281 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1660 }, {  13,-1660 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1660 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-1660 }, {  22,-1660 }, {  23,-1660 },
 {  24,-1660 }, {  25,-1660 }, {  26,-1660 }, {  27,-1660 }, {  28, 539 },
 {  29,-1660 }, {  30,-1660 }, {  31,-1660 }, {  32,-1660 }, {  33,-1660 },
 {  34,-1660 }, {  35,-1660 }, {  36,-1660 }, {  37,-1660 }, {  38,-1660 },
 {  39,-1660 }, {   0,  19 }, {   0,1240 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1701 },
 {  13,-1701 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1701 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1701 }, {  22,-1701 },
 {  23,-1701 }, {  24,-1701 }, {  25,-1701 }, {  26,-1701 }, {  27,-1701 },
 {  28,-1701 }, {  29,-1701 }, {  30,-1701 }, {  31,-1701 }, {  32,-1701 },
 {  33,-1701 }, {  34,-1701 }, {  35, 539 }, {  36,-1701 }, {  37,-1701 },
 {  38,-1701 }, {  39,-1701 }, {   0,  19 }, {   0,1199 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1742 }, {  13,-1742 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1742 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-1742 },
 {  22,-1742 }, {  23,-1742 }, {  24,-1742 }, {  25,-1742 }, {  26,-1742 },

 {  27,-1742 }, {  28,-1742 }, {  29,-1742 }, {  30, 539 }, {  31,-1742 },
 {  32,-1742 }, {  33,-1742 }, {  34,-1742 }, {  35,-1742 }, {  36,-1742 },
 {  37,-1742 }, {  38,-1742 }, {  39,-1742 }, {   0,  19 }, {   0,1158 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1783 }, {  13,-1783 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-1783 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-1783 }, {  22,-1783 }, {  23,-1783 }, {  24,-1783 }, {  25, 539 },
 {  26,-1783 }, {  27,-1783 }, {  28,-1783 }, {  29,-1783 }, {  30,-1783 },
 {  31,-1783 }, {  32,-1783 }, {  33,-1783 }, {  34,-1783 }, {  35,-1783 },

 {  36,-1783 }, {  37,-1783 }, {  38,-1783 }, {  39,-1783 }, {   0,  19 },
 {   0,1117 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1824 }, {  13,-1824 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-1824 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-1824 }, {  22,-1824 }, {  23,-1824 }, {  24,-1824 },
 {  25, 539 }, {  26,-1824 }, {  27,-1824 }, {  28,-1824 }, {  29,-1824 },
 {  30,-1824 }, {  31,-1824 }, {  32,-1824 }, {  33,-1824 }, {  34,-1824 },
 {  35,-1824 }, {  36,-1824 }, {  37,-1824 }, {  38,-1824 }, {  39,-1824 },
 {   0,  17 }, {   0,1076 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1865 }, {  13,-1865 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1865 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-1865 }, {  22,-1865 }, {  23,-1865 },
 {  24,-1865 }, {  25,-1865 }, {  26,-1865 }, {  27,-1865 }, {  28,-1865 },
 {  29,-1865 }, {  30,-1865 }, {  31,-1865 }, {  32,-1865 }, {  33,-1865 },
 {  34,-1865 }, {  35,-1865 }, {  36,-1865 }, {  37,-1865 }, {  38,-1865 },
 {  39,-1865 }, {   0,   0 }, {   0,1035 }, {   1,   0 }, {   2,   0 },
 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,-496 }, {   9,   0 }, {  10,   0 }, {  11,  43 }, {  12,   0 },

 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {   0,   0 },
 {   0, 992 }, {   1, -43 }, {   2, -43 }, {   3, -43 }, {   4, -43 },
 {   5, -43 }, {   6, -43 }, {   7, -43 }, {   8,-539 }, {   9, -43 },
 {  10, -43 }, {  11,   0 }, {  12, -43 }, {  13, -43 }, {  14, -43 },
 {  15, -43 }, {  16, -43 }, {  17, -43 }, {  18, -43 }, {  19, -43 },

 {  20, -43 }, {  21, -43 }, {  22, -43 }, {  23, -43 }, {  24, -43 },
 {  25, -43 }, {  26, -43 }, {  27, -43 }, {  28, -43 }, {  29, -43 },
 {  30, -43 }, {  31, -43 }, {  32, -43 }, {  33, -43 }, {  34, -43 },
 {  35, -43 }, {  36, -43 }, {  37, -43 }, {  38, -43 }, {  39, -43 },
 {  40, -43 }, {  41, -43 }, {   0,   0 }, {   0, 949 }, {   1,   0 },
 {   2,   0 }, {   3,-1899 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,-1119 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },

 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {   0,  19 }, {   0, 906 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2035 }, {  13,-2035 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2035 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-2035 }, {  22,-2035 }, {  23,-2035 },
 {  24,-2035 }, {  25,-2035 }, {  26,-2035 }, {  27,-2035 }, {  28,-2035 },
 {  29,-2035 }, {  30,-2035 }, {  31,-2035 }, {  32,-2035 }, {  33, 369 },

 {  34,-2035 }, {  35,-2035 }, {  36,-2035 }, {  37,-2035 }, {  38,-2035 },
 {  39,-2035 }, {   0,  18 }, {   0, 865 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2076 },
 {  13,-2076 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2076 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2076 }, {  22,-2076 },
 {  23,-2076 }, {  24,-2076 }, {  25,-2076 }, {  26,-2076 }, {  27,-2076 },
 {  28,-2076 }, {  29,-2076 }, {  30,-2076 }, {  31,-2076 }, {  32,-2076 },
 {  33,-2076 }, {  34,-2076 }, {  35,-2076 }, {  36,-2076 }, {  37,-2076 },
 {  38,-2076 }, {  39,-2076 }, {   0,   5 }, {   0, 824 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2117 }, {  13,-2117 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2117 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2117 },
 {  22,-2117 }, {  23,-2117 }, {  24,-2117 }, {  25,-2117 }, {  26,-2117 },
 {  27,-2117 }, {  28,-2117 }, {  29,-2117 }, {  30,-2117 }, {  31,-2117 },
 {  32,-2117 }, {  33,-2117 }, {  34,-2117 }, {  35,-2117 }, {  36,-2117 },
 {  37,-2117 }, {  38,-2117 }, {  39,-2117 }, {   0,  19 }, {   0, 783 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  12,-2158 }, {  13,-2158 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2158 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-2158 }, {  22,-2158 }, {  23,-2158 }, {  24,-2158 }, {  25,-2158 },
 {  26, 287 }, {  27,-2158 }, {  28,-2158 }, {  29,-2158 }, {  30,-2158 },
 {  31,-2158 }, {  32,-2158 }, {  33,-2158 }, {  34,-2158 }, {  35,-2158 },
 {  36,-2158 }, {  37,-2158 }, {  38,-2158 }, {  39,-2158 }, {   0,   7 },
 {   0, 742 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2199 }, {  13,-2199 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2199 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  21,-2199 }, {  22,-2199 }, {  23,-2199 }, {  24,-2199 },
 {  25,-2199 }, {  26,-2199 }, {  27,-2199 }, {  28,-2199 }, {  29,-2199 },
 {  30,-2199 }, {  31,-2199 }, {  32,-2199 }, {  33,-2199 }, {  34,-2199 },
 {  35,-2199 }, {  36,-2199 }, {  37,-2199 }, {  38,-2199 }, {  39,-2199 },
 {   0,  19 }, {   0, 701 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2240 }, {  13,-2240 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2240 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-2240 }, {  22, 246 }, {  23,-2240 },
 {  24,-2240 }, {  25,-2240 }, {  26,-2240 }, {  27,-2240 }, {  28,-2240 },

 {  29,-2240 }, {  30,-2240 }, {  31,-2240 }, {  32,-2240 }, {  33,-2240 },
 {  34,-2240 }, {  35,-2240 }, {  36,-2240 }, {  37,-2240 }, {  38,-2240 },
 {  39,-2240 }, {   0,  19 }, {   0, 660 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2281 },
 {  13,-2281 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2281 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2281 }, {  22,-2281 },
 {  23,-2281 }, {  24,-2281 }, {  25, 246 }, {  26,-2281 }, {  27,-2281 },
 {  28,-2281 }, {  29,-2281 }, {  30,-2281 }, {  31,-2281 }, {  32,-2281 },
 {  33,-2281 }, {  34,-2281 }, {  35,-2281 }, {  36,-2281 }, {  37,-2281 },

 {  38,-2281 }, {  39,-2281 }, {   0,  19 }, {   0, 619 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2322 }, {  13,-2322 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2322 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2322 },
 {  22,-2322 }, {  23,-2322 }, {  24,-2322 }, {  25,-2322 }, {  26,-2322 },
 {  27,-2322 }, {  28,-2322 }, {  29,-2322 }, {  30,-2322 }, {  31,-2322 },
 {  32,-2322 }, {  33,-2322 }, {  34,-2322 }, {  35, 246 }, {  36,-2322 },
 {  37,-2322 }, {  38,-2322 }, {  39,-2322 }, {   0,  19 }, {   0, 578 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2363 }, {  13,-2363 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2363 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-2363 }, {  22,-2363 }, {  23,-2363 }, {  24,-2363 }, {  25,-2363 },
 {  26,-2363 }, {  27,-2363 }, {  28,-2363 }, {  29,-2363 }, {  30,-2363 },
 {  31,-2363 }, {  32,-2363 }, {  33,-2363 }, {  34,-2363 }, {  35,-2363 },
 {  36, 246 }, {  37,-2363 }, {  38,-2363 }, {  39,-2363 }, {   0,  19 },
 {   0, 537 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2404 }, {  13,-2404 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  17,-2404 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-2404 }, {  22,-2404 }, {  23,-2404 }, {  24,-2404 },
 {  25,-2404 }, {  26,-2404 }, {  27,-2404 }, {  28,-2404 }, {  29, 246 },
 {  30,-2404 }, {  31,-2404 }, {  32,-2404 }, {  33,-2404 }, {  34,-2404 },
 {  35,-2404 }, {  36,-2404 }, {  37,-2404 }, {  38,-2404 }, {  39,-2404 },
 {   0,  19 }, {   0, 496 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2445 }, {  13,-2445 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2445 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  21,-2445 }, {  22, 246 }, {  23,-2445 },

 {  24,-2445 }, {  25,-2445 }, {  26,-2445 }, {  27,-2445 }, {  28,-2445 },
 {  29,-2445 }, {  30,-2445 }, {  31,-2445 }, {  32,-2445 }, {  33,-2445 },
 {  34,-2445 }, {  35,-2445 }, {  36,-2445 }, {  37,-2445 }, {  38,-2445 },
 {  39,-2445 }, {   0,  19 }, {   0, 455 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2486 },
 {  13,-2486 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2486 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2486 }, {  22,-2486 },
 {  23,-2486 }, {  24,-2486 }, {  25,-2486 }, {  26,-2486 }, {  27,-2486 },
 {  28,-2486 }, {  29,-2486 }, {  30,-2486 }, {  31, 246 }, {  32,-2486 },

 {  33,-2486 }, {  34,-2486 }, {  35,-2486 }, {  36,-2486 }, {  37,-2486 },
 {  38,-2486 }, {  39,-2486 }, {   0,  19 }, {   0, 414 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2527 }, {  13,-2527 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2527 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2527 },
 {  22,-2527 }, {  23,-2527 }, {  24,-2527 }, {  25,-2527 }, {  26,-2527 },
 {  27,-2527 }, {  28,-2527 }, {  29,-2527 }, {  30,-2527 }, {  31,-2527 },
 {  32,-2527 }, {  33,-2527 }, {  34,-2527 }, {  35,-410 }, {  36,-2527 },
 {  37,-2527 }, {  38,-2527 }, {  39,-2527 }, {   0,   3 }, {   0, 373 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2568 }, {  13,-2568 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2568 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-2568 }, {  22,-2568 }, {  23,-2568 }, {  24,-2568 }, {  25,-2568 },
 {  26,-2568 }, {  27,-2568 }, {  28,-2568 }, {  29,-2568 }, {  30,-2568 },
 {  31,-2568 }, {  32,-2568 }, {  33,-2568 }, {  34,-2568 }, {  35,-2568 },
 {  36,-2568 }, {  37,-2568 }, {  38,-2568 }, {  39,-2568 }, {   0,   2 },
 {   0, 332 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  12,-2609 }, {  13,-2609 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2609 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-2609 }, {  22,-2609 }, {  23,-2609 }, {  24,-2609 },
 {  25,-2609 }, {  26,-2609 }, {  27,-2609 }, {  28,-2609 }, {  29,-2609 },
 {  30,-2609 }, {  31,-2609 }, {  32,-2609 }, {  33,-2609 }, {  34,-2609 },
 {  35,-2609 }, {  36,-2609 }, {  37,-2609 }, {  38,-2609 }, {  39,-2609 },
 {   0,  19 }, {   0, 291 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2650 }, {  13,-2650 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2650 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  21,-2650 }, {  22,-2650 }, {  23,-2650 },
 {  24,-451 }, {  25,-2650 }, {  26,-2650 }, {  27,-2650 }, {  28,-2650 },
 {  29,-2650 }, {  30,-2650 }, {  31,-2650 }, {  32,-2650 }, {  33,-2650 },
 {  34,-2650 }, {  35,-2650 }, {  36,-2650 }, {  37,-2650 }, {  38,-2650 },
 {  39,-2650 }, {   0,  19 }, {   0, 250 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2691 },
 {  13,-2691 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2691 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2691 }, {  22,-2691 },
 {  23,  82 }, {  24,-2691 }, {  25,-2691 }, {  26,-2691 }, {  27,-2691 },

 {  28,-2691 }, {  29,-2691 }, {  30,-2691 }, {  31,-2691 }, {  32,-2691 },
 {  33,-2691 }, {  34,-2691 }, {  35,-2691 }, {  36,-2691 }, {  37,-2691 },
 {  38,-2691 }, {  39,-2691 }, {   0,   1 }, {   0, 209 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2732 }, {  13,-2732 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2732 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  21,-2732 },
 {  22,-2732 }, {  23,-2732 }, {  24,-2732 }, {  25,-2732 }, {  26,-2732 },
 {  27,-2732 }, {  28,-2732 }, {  29,-2732 }, {  30,-2732 }, {  31,-2732 },
 {  32,-2732 }, {  33,-2732 }, {  34,-2732 }, {  35,-2732 }, {  36,-2732 },

 {  37,-2732 }, {  38,-2732 }, {  39,-2732 }, {   0,  19 }, {   0, 168 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2773 }, {  13,-2773 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2773 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  21,-2773 }, {  22,-2773 }, {  23,-2773 }, {  24,-2773 }, {  25,  41 },
 {  26,-2773 }, {  27,-2773 }, {  28,-2773 }, {  29,-2773 }, {  30,-2773 },
 {  31,-2773 }, {  32,-2773 }, {  33,-2773 }, {  34,-2773 }, {  35,-2773 },
 {  36,-2773 }, {  37,-2773 }, {  38,-2773 }, {  39,-2773 }, {   0,   4 },
 {   0, 127 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2814 }, {  13,-2814 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2814 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  21,-2814 }, {  22,-2814 }, {  23,-2814 }, {  24,-2814 },
 {  25,-2814 }, {  26,-2814 }, {  27,-2814 }, {  28,-2814 }, {  29,-2814 },
 {  30,-2814 }, {  31,-2814 }, {  32,-2814 }, {  33,-2814 }, {  34,-2814 },
 {  35,-2814 }, {  36,-2814 }, {  37,-2814 }, {  38,-2814 }, {  39,-2814 },
 {   0,   0 }, {   0,  86 }, {   1,  43 }, {   2,  43 }, {   0,   0 },
 {   4,-2546 }, {   5,  43 }, {   6,  43 }, {   7,  43 }, {   8,  43 },
 {   9,  43 }, {  10,  43 }, {  11,  43 }, {  12,  43 }, {  13,  43 },

 {  14,  43 }, {  15,  43 }, {  16,  43 }, {  17,  43 }, {  18,  43 },
 {  19,  43 }, {  20,  43 }, {  21,  43 }, {  22,  43 }, {  23,  43 },
 {  24,  43 }, {  25,  43 }, {  26,  43 }, {  27,  43 }, {  28,  43 },
 {  29,  43 }, {  30,  43 }, {  31,  43 }, {  32,  43 }, {  33,  43 },
 {  34,  43 }, {  35,  43 }, {  36,  43 }, {  37,  43 }, {  38,  43 },
 {  39,  43 }, {  40,  43 }, {  41,  43 }, {   0,   0 }, {   0,  43 },
 {   1,   0 }, {   2,   0 }, {   0,   0 }, {   4,-2589 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },

 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,  34 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[46],

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    8,    1,    9,    1,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       18,   19,   20,    1,   21,    1,   22,   17,   23,   24,

       25,   26,   27,   28,   29,   17,   17,   30,   31,   32,
       33,   34,   17,   35,   36,   37,   38,   39,   17,   17,
       17,   17,   40,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[34] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int glfx_flex_debug;
int glfx_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *glfxtext;
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc

    // No unistd.h
    #define YY_NO_UNISTD_H

    // Direct IO functions (read and such)
    #include <io.h>

    // Disable the warning for glfxwrap
    #pragma warning( disable: 4003 )

    // Disable the warning about depracted naming of _read and friends
    #pragma warning( disable: 4996 )

    #endif

    #ifdef _M_X64
    // flex is (still) incompatible with x64
    // it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
    // it should work though, nothing too serious
    #pragma warning( disable:4267 )
    #pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>

    #include "glfx/glfxParser.h"
    #include "glfx/glfxClasses.h"

    // tokens from parser generator
    #include "glfx/glfxLALRParser.hpp"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glfxlex_destroy (void );

int glfxget_debug (void );

void glfxset_debug (int debug_flag  );

YY_EXTRA_TYPE glfxget_extra (void );

void glfxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *glfxget_in (void );

void glfxset_in  (FILE * in_str  );

FILE *glfxget_out (void );

void glfxset_out  (FILE * out_str  );

yy_size_t glfxget_leng (void );

char *glfxget_text (void );

int glfxget_lineno (void );

void glfxset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glfxwrap (void );
#else
extern int glfxwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( glfxtext, glfxleng, 1, glfxout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(glfxin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(glfxin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glfxlex (void);

#define YY_DECL int glfxlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after glfxtext and glfxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( glfxleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(glfxtext[glfxleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! glfxin )
			glfxin = stdin;

		if ( ! glfxout )
			glfxout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glfxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				glfx_create_buffer(glfxin,YY_BUF_SIZE );
		}

		glfx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of glfxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = yy_ec[YY_SC_TO_UI(*++yy_cp)]  )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < glfxleng; ++yyl )
				if ( glfxtext[yyl] == '\n' )
					   
    glfxlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
glfxlval.boolean=false; return PROGRAM;
	YY_BREAK
case 2:
YY_RULE_SETUP
glfxlval.boolean=true; return PROGRAM;
	YY_BREAK
case 3:
YY_RULE_SETUP
glfxlval.lineno=glfxlineno; return SHADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
glfxlval.lineno=glfxlineno; return INTERFACE;
	YY_BREAK
case 5:
YY_RULE_SETUP
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return SAMPLER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{
                                                    string tmp(glfxtext);
                                                    size_t firstLoc=tmp.find('"')+1;
                                                    size_t secondLoc=tmp.find('"', firstLoc);
                                                    glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
                                                    glfxlval.lineno=glfxlineno-1; // flex has already jumped one line, since \n was eaten
                                                    return INCLUDE;
                                                }
	YY_BREAK
case 7:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.strs[0]=glfxtext; return STORAGET;}
	YY_BREAK
case 8:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=VS; return SHADER_TYPE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TC; return SHADER_TYPE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TE; return SHADER_TYPE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=GS; return SHADER_TYPE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=FS; return SHADER_TYPE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=CS; return SHADER_TYPE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=atoi(glfxtext); return NUM;}
	YY_BREAK
case 15:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.fnum=(float)atof(glfxtext); return FLOAT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return STORAGEQ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=1; return NUM;}
	YY_BREAK
case 18:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=0; return NUM;}
	YY_BREAK
case 19:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return IDENTIFIER;}
	YY_BREAK
case 20:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LB;}
	YY_BREAK
case 23:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RB;}
	YY_BREAK
case 24:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EMPTY_ARRAY_BRACKETS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COMMA;}
	YY_BREAK
case 26:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EQUALS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return SC;}
	YY_BREAK
case 28:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COLON;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Single line comment (with possible continuation)
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Multiline comment
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext;
	YY_BREAK
case 32:
YY_RULE_SETUP
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {errLex(glfxtext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed glfxin at a new source and called
			 * glfxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = glfxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( glfxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * glfxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glfxlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glfxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glfxrestart(glfxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glfxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 1;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up glfxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --glfxlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glfxrestart(glfxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glfxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve glfxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    glfxlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void glfxrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        glfxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            glfx_create_buffer(glfxin,YY_BUF_SIZE );
	}

	glfx_init_buffer(YY_CURRENT_BUFFER,input_file );
	glfx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void glfx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glfxpop_buffer_state();
	 *		glfxpush_buffer_state(new_buffer);
     */
	glfxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glfx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (glfxwrap()) processing, but the only time this flag
	 * is looked at is after glfxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void glfx_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	glfxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE glfx_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glfxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	glfx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with glfx_create_buffer()
 * 
 */
    void glfx_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glfxfree((void *) b->yy_ch_buf  );

	glfxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glfxrestart() or at EOF.
 */
    static void glfx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	glfx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glfx_init_buffer was _probably_
     * called from glfxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void glfx_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glfx_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	glfxensure_buffer_stack();

	/* This block is copied from glfx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glfx_switch_to_buffer. */
	glfx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void glfxpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	glfx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		glfx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glfxensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glfx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glfx_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glfxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       glfx_scan_bytes() instead.
 */
YY_BUFFER_STATE glfx_scan_string (yyconst char * yystr )
{
    
	return glfx_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to glfxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glfx_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glfxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glfx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glfx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		glfxtext[glfxleng] = (yy_hold_char); \
		(yy_c_buf_p) = glfxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		glfxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int glfxget_lineno  (void)
{
        
    return glfxlineno;
}

/** Get the input stream.
 * 
 */
FILE *glfxget_in  (void)
{
        return glfxin;
}

/** Get the output stream.
 * 
 */
FILE *glfxget_out  (void)
{
        return glfxout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t glfxget_leng  (void)
{
        return glfxleng;
}

/** Get the current token.
 * 
 */

char *glfxget_text  (void)
{
        return glfxtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void glfxset_lineno (int  line_number )
{
    
    glfxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see glfx_switch_to_buffer
 */
void glfxset_in (FILE *  in_str )
{
        glfxin = in_str ;
}

void glfxset_out (FILE *  out_str )
{
        glfxout = out_str ;
}

int glfxget_debug  (void)
{
        return glfx_flex_debug;
}

void glfxset_debug (int  bdebug )
{
        glfx_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glfxlex_destroy(), so don't allocate here.
     */

    /* We do not touch glfxlineno unless the option is enabled. */
    glfxlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    glfxin = stdin;
    glfxout = stdout;
#else
    glfxin = (FILE *) 0;
    glfxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glfxlex_init()
     */
    return 0;
}

/* glfxlex_destroy is for both reentrant and non-reentrant scanners. */
int glfxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glfx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glfxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	glfxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glfxlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glfxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glfxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glfxfree (void * ptr )
{
	free( (char *) ptr );	/* see glfxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"




void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<glfxlineno<<") : error: Unkown token '"<<tok<<'\'';
    throw errMsg.str();
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    unsigned char c;
    bool done=false;
    do {
        c=(unsigned char)yyinput();
        str+=c;
        if(c==0)
            throw "Brace balance error\n";
        else if(c==openChar)
            braceBalance++;
        else if(c==closeChar) {
            braceBalance--;
            if(braceBalance<0)
                throw "Brace balance error\n";
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}

